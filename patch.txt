*** Begin Patch
*** Add File: CONTRIBUTING.md
+# Contributing to arr-medic-cyp3a4-opensource
+
+## Development Quickstart
+```bash
+git clone https://github.com/OWNER/arr-medic-cyp3a4-opensource.git
+cd arr-medic-cyp3a4-opensource
+python -m venv .venv && source .venv/bin/activate
+pip install -e .
+pip install -r requirements-dev.txt
+pytest -q
+```
+
+## Commit & Branch
+- Conventional commits 권장: `feat:`, `fix:`, `docs:`, `chore:`
+- Branch naming: `feat/<topic>` or `fix/<topic>`
+
+## Testing
+- 모든 새로운 기능은 pytest 기반 단위테스트를 추가해야 합니다.
+- API endpoint / DB I/O / predictor 동작 커버리지 포함.
+
+## Pull Requests
+- [ ] 테스트 통과
+- [ ] 커버리지 ≥ 80%
+- [ ] README / Docs 업데이트
+
*** End Patch
*** Update File: .github/workflows/backend-ci.yml
@@
       - name: Run tests
         run: |
           pytest -q --maxfail=1 --disable-warnings --cov=.
-      - name: Bandit Security Scan
-        run: bandit -r . || true
+      - name: Bandit Security Scan
+        run: bandit -r .
*** End Patch
*** Add File: requirements-dev.txt
+pytest>=8.2
+pytest-cov>=5.0
+bandit>=1.7
+mypy>=1.10
+black>=24.4
+isort>=5.13
*** End Patch
*** Update File: README.md
@@
 ## Features
 - FastAPI backend
 - CYP3A4 predictor (rule-based, extensible)
+
+⚠️ **Disclaimer**: This project is for **research and educational purposes only**.  
+It is **not intended for clinical or diagnostic use**.
+
+## Installation
+```bash
+git clone https://github.com/OWNER/arr-medic-cyp3a4-opensource.git
+cd arr-medic-cyp3a4-opensource
+pip install -r requirements.txt
+```
+
+## Running (local)
+```bash
+uvicorn app.main:app --reload
+```
+
+## Example API call
+```bash
+curl -X POST http://127.0.0.1:8000/predict \
+  -H "Content-Type: application/json" \
+  -d '{"smiles": "CCO"}'
+```
+
+## Contributing
+See [CONTRIBUTING.md](CONTRIBUTING.md)
*** End Patch
*** Update File: predictor.py
@@
 def predict(smiles: str) -> dict:
-    # Simple rule-based predictor
-    if "N" in smiles:
-        return {"cyp3a4": True, "confidence": 0.7}
-    return {"cyp3a4": False, "confidence": 0.7}
+    """Predict CYP3A4 substrate likelihood.
+
+    Currently rule-based (~70% accuracy).  
+    Future extension: support ML models (RandomForest, XGBoost, GNN).
+    """
+    if "N" in smiles:
+        return {"cyp3a4": True, "confidence": 0.7, "model": "rule-based"}
+    return {"cyp3a4": False, "confidence": 0.7, "model": "rule-based"}
*** End Patch
*** Add File: tests/test_predictor.py
+import pytest
+from predictor import predict
+
+def test_predict_with_nitrogen():
+    res = predict("CCN")
+    assert res["cyp3a4"] is True
+    assert 0 <= res["confidence"] <= 1
+
+def test_predict_without_nitrogen():
+    res = predict("CCO")
+    assert res["cyp3a4"] is False
+    assert "model" in res
*** End Patch
*** End Patch
